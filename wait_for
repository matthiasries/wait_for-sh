#!/bin/bash

host="127.0.0.1"
port=22
delay=0
proto="tcp"
sleep_time=1
connection_timeout=5
timeout=300
timeouted=0
cmd=""
go=0
start_time=$(date +%s)

die(){
	echo "$@"
	exit 1
}

usage(){
	cat <<EOF 
	wait_for [--option=value] [command]

	options:
	all options 
		--host=127.0.0.1   # A resolvable hostname or IP address to wait for Default is 127.0.0.1

	more options (optional):
		--help        # Shows this help page
		--sleep=1     # Number of seconds to sleep between checks. Default 1 seconds
		--delay=0     # Number of seconds to wait before starting to poll. Default 0 seconds
		--wait=0      # Number of seconds to wait after the host is reachable. Default  0 seconds
		--timeout=300 # Maximum number of seconds to wait for, when used with another condition it will force an error. Default 300 seconds
		--port=22     # Port number to poll Default is 22 (ssh)

	command (optional):
		every non option parameter is considered as the command wait_for is supposed to execute.
		if no command is given wait_for returns return code 0 for OK and 1 for timeout host not reachable

	examples:
		wait_for ssh 127.0.0.1
		wait_for --host=myserver scp file  root@myserver:/folder/  || echo "Timeout. myserver not reachable"
		wait_for --host=myserver --port=80  && curl --HEAD myserver  || echo "My Server not reachable" 

		if wait_for --host=mad4milk.de;
		then
			echo "do stuff"
		else
			echo "can't do stuff"
		fi	
EOF
}

until [[ "$@" == '' ]]
do
	param="${1//=*/}"
	value="${1//*=/}"
	case $param in
		--help)
			usage
			exit 1
			;;
		--sleep)
			[[ "${value//[0-9]/}" == '' ]] || die "--sleep only takes seconds"
			sleep="$value"
			;;
		--delay)
			[[ "${value//[0-9]/}" == '' ]] || die "--delay only takes seconds"
			delay="$value"
			;;
		--timeout)
			[[ "${value//[0-9]/}" == '' ]] || die "--timeout only takes seconds"
			timeout="$value"
			;;
		--host)
			[[ "$value" == '' ]] && die "--host has to be an IP or hostname"
			go=1
			host="$value"
			;;
		--port)
			[[ "${value//[0-9a-zA-Z]/}" == '' ]] || die "--port takes a port number or a registered service name"
			port="$value"
			go=1
			;;
		--proto)
			[[ "${value}" != 'tcp' && "${value}" != "udp" ]] || die "--proto only takes tcp or udp as a parameter"
			proto="$value"
			;;
		*)
			cmd="$@"
			go=1
			break
			;;
	esac
	shift
done
timeout=$((delay+timeout))
function Timeout(){
	if [[ $(($(date +%s)-start_time)) -gt $timeout ]];then
		timeouted=1
		return 0
	fi
	return 1
}


if [[ $go -eq 1 ]]; 
then
	sleep "$delay"
	until Timeout
	do
		(echo "" > "/dev/$proto/$host/$port") >/dev/null 2>&1 && break
		sleep $sleep_time
	done
	[[ $timeouted != 0 ]] && exit 1
	[[ "$cmd" == "" ]] && exit 0
	[[ "$cmd" != "" ]] && eval "$@"
fi	
exit 1
